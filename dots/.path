#!/bin/bash

# Determine Mac architecture and set Homebrew paths accordingly
HOMEBREW_PREFIX=$([[ "$(uname -m)" == "arm64" ]] && echo "/opt/homebrew" || echo "/usr/local")

# Function to safely add directories to environment variables
add_to_env_path() {
    local new_path="$1"
    local env_var="${2:-PATH}" # Default to PATH if no env_var is provided
    eval "current_path=\$$env_var"

    if [ -d "$new_path" ]; then
        case ":${current_path}:" in
            *":${new_path}:"*) ;; # Already in PATH/MANPATH
            *) eval "export $env_var=\"${new_path}:${current_path}\"" ;;
        esac
    fi
}

# Set up environment paths
export GOPATH="${HOME}/go"
mkdir -p "$GOPATH"

add_to_env_path "${HOMEBREW_PREFIX}/bin"
add_to_env_path "/sbin"
add_to_env_path "${HOMEBREW_PREFIX}/go/bin"
add_to_env_path "${GOPATH}/bin"
add_to_env_path "${HOME}/.cargo/bin" # Rust

# Add GNU coreutils paths if they exist
for tool in coreutils make findutils; do
    gnubin_path="${HOMEBREW_PREFIX}/opt/${tool}/libexec/gnubin"
    gnuman_path="${HOMEBREW_PREFIX}/opt/${tool}/libexec/gnuman"
    add_to_env_path "$gnubin_path"
    add_to_env_path "$gnuman_path" "MANPATH"
done

# Add Homebrew's sbin path if it exists
add_to_env_path "${HOMEBREW_PREFIX}/sbin"

# Ensure unique entries in PATH and MANPATH
clean_env_path() {
    local env_var="$1"
    eval "old_paths=\$$env_var"
    eval "$env_var=\"$(echo "$old_paths" | awk -v RS=: '!a[$0]++ { if (NR > 1) printf(":"); printf $0 }')\""
}

clean_env_path PATH
clean_env_path MANPATH

# Optional: Add useful environment variables
export EDITOR="vim"
export VISUAL="vim"
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# Export final cleaned paths
export PATH MANPATH
